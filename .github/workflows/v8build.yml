name: V8 Build

on:
    push:
        branches:
        - master
        - workflow/v8upgrade
        paths:
        - deps/latest_v8_hash
    workflow_dispatch:
    workflow_call:

jobs:
    build_common:
        name: Build Architecture Independent Files
        runs-on: ubuntu-latest
        steps:
            - name: Checkout
              uses: actions/checkout@v4
              with:
                  submodules: true
                  fetch-depth: 1

            - name: Update to latest V8
              run: |
                  latest_v8_hash="$(<deps/latest_v8_hash)"
                  cd deps/v8
                  git fetch origin "$latest_v8_hash"
                  latest_v8_version="$(git tag --points-at "$latest_v8_hash" | head -n1)"
                  git checkout "${latest_v8_version:-$latest_v8_hash}"

            - name: Create include files
              run: cd deps && ./build_common.py

            - name: Upload include/ Artifacts
              uses: actions/upload-artifact@v4
              with:
                  # The name matches the directory under deps/.
                  name: include
                  if-no-files-found: error
                  path: deps/include/
                  retention-days: 2

    build:
        name: Build V8 for ${{ matrix.os }} ${{ matrix.arch }}
        strategy:
            fail-fast: false
            matrix:
                os: [android, darwin, linux]
                arch: [amd64, arm64]
                include:
                    - os: android
                      platform: ubuntu-latest
                    - os: linux
                      platform: ubuntu-latest
                    - os: darwin
                      platform: macos-latest
        runs-on: ${{ matrix.platform }}
        steps:
            - name: Install g++-aarch64-linux-gnu
              if: matrix.os == 'linux' && matrix.arch == 'arm64'
              run: sudo apt update && sudo apt install g++-aarch64-linux-gnu -y

            - name: Install setuptools
              if: matrix.platform == 'macos-latest'
              run: python3 -m ensurepip --default-pip && python3 -m pip install --upgrade setuptools

            - name: Install CCache
              if: matrix.platform == 'ubuntu-latest'
              run: |
                  sudo apt-get update
                  sudo apt-get install -yq ccache
                  sudo update-ccache-symlinks

                  echo "/usr/lib/ccache" >> "$GITHUB_PATH"

            - name: Install CCache
              if: matrix.platform == 'macos-latest'
              run: |
                  brew install ccache

                  echo "$(brew --prefix ccache)/libexec" >> "$GITHUB_PATH"

            - name: Checkout
              uses: actions/checkout@v4
              with:
                  submodules: true
                  fetch-depth: 1

            - name: Update to latest V8
              run: |
                  latest_v8_hash="$(<deps/latest_v8_hash)"
                  cd deps/v8
                  git fetch origin "$latest_v8_hash"
                  latest_v8_version="$(git tag --points-at "$latest_v8_hash" | head -n1)"
                  git checkout "${latest_v8_version:-$latest_v8_hash}"

            - name: Configure CCache
              run: |
                  ccacheDir="$HOME/.ccache"
                  mkdir -p "$ccacheDir"
                  echo "CCACHE_DIR=$ccacheDir" >> "$GITHUB_ENV"
                  echo "CCACHE_CPP2=yes" >> "$GITHUB_ENV"
                  echo "CCACHE_SLOPPINESS=time_macros" >> "$GITHUB_ENV"

            - name: Restore CCache
              uses: actions/cache@v3
              with:
                  path: ~/.ccache
                  key: libv8:ccache:${{ matrix.os }}:${{ matrix.arch }}:${{ hashFiles('deps/v8_hash') }}:${{ runner.os }}
                  restore-keys: |
                      libv8:ccache:${{ matrix.os }}:${{ matrix.arch }}:
                      ${{ runner.os }}:${{ matrix.os }}:${{ matrix.arch }}:libv8:ccache

            - name: Restore V8 Build Cache
              uses: actions/cache@v3
              with:
                  path: deps/v8/build
                  key: libv8:v8build:${{ matrix.os }}:${{ matrix.arch }}:${{ hashFiles('deps/v8_hash') }}:${{ runner.os }}
                  restore-keys: |
                      libv8:v8build:${{ matrix.os }}:${{ matrix.arch }}:

            - name: Update depot_tools fetch config
              run: cd deps/depot_tools && git config --unset-all remote.origin.fetch; git config --add remote.origin.fetch +refs/heads/*:refs/remotes/origin/*

            - name: Build V8 (${{ matrix.os }})
              run: cd deps && ./build.py --ccache --verbose --arch ${{ matrix.arch }} --os ${{ matrix.os }}

            - name: Show CCache Status
              run: ccache -s

            - name: Upload Artifacts
              uses: actions/upload-artifact@v4
              with:
                  # The name matches the directory under deps/.
                  name: ${{ matrix.os }}_${{ matrix.arch }}
                  if-no-files-found: error
                  path: |
                      deps/${{ matrix.os }}_${{ matrix.arch }}/
                      !deps/${{ matrix.os }}_${{ matrix.arch }}/vendor.go
                  retention-days: 2

    commit:
        name: Commit Built Artifacts
        needs: [build, build_common]
        runs-on: ubuntu-latest
        steps:
            - name: Checkout
              uses: actions/checkout@v4
              with:
                  submodules: true
                  fetch-depth: 1

            - id: update_v8
              name: Update to latest V8
              run: |
                  latest_v8_hash="$(<deps/latest_v8_hash)"
                  echo "$latest_v8_hash" >deps/v8_hash

                  cd deps/v8
                  git fetch origin "$latest_v8_hash"
                  latest_v8_version="$(git tag --points-at "$latest_v8_hash" | head -n1)"
                  git checkout "${latest_v8_version:-$latest_v8_hash}"
                  echo "latest_v8_version=${latest_v8_version:-$latest_v8_hash}" >>"$GITHUB_OUTPUT"

            - name: Remove old static libraries
              run: "find deps -maxdepth 2 -type f -name libmanifest | xargs -rn1 dirname | xargs -r rm -fr"

            - name: Download Artifacts
              uses: actions/download-artifact@v4
              with:
                  path: deps

            - name: Update LDFLAGS in cgo.go
              run: ./deps/update_cgo.py

            - id: create_pr
              name: Create PR
              uses: peter-evans/create-pull-request@v6
              with:
                  commit-message: Add built V8 libraries at ${{ steps.update_v8.outputs.latest_v8_version }}
                  title: Add built V8 libraries at ${{ steps.update_v8.outputs.latest_v8_version }}
                  body: Auto-generated pull request of built V8 libraries
                  add-paths: |
                      cgo.go
                      deps/*_*/libv8*.a
                      deps/*_*/libmanifest
                      deps/include/**
                      deps/depot_tools
                      deps/v8
                      deps/v8_hash
                  branch: workflow/v8build
                  reviewers: tommie
                  delete-branch: true

            - name: Create Summary
              run: |
                  echo "PR: ${{ steps.create_pr.outputs.pull-request-url }}" >>"$GITHUB_STEP_SUMMARY"
